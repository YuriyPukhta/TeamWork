[{"D:\\project\\QQMerged\\ClientApp\\src\\index.js":"1","D:\\project\\QQMerged\\ClientApp\\src\\App.js":"2","D:\\project\\QQMerged\\ClientApp\\src\\registerServiceWorker.js":"3","D:\\project\\QQMerged\\ClientApp\\src\\components\\Account.jsx":"4","D:\\project\\QQMerged\\ClientApp\\src\\components\\ForgotPass.js":"5","D:\\project\\QQMerged\\ClientApp\\src\\components\\CreateQueue.js":"6","D:\\project\\QQMerged\\ClientApp\\src\\components\\Login.js":"7","D:\\project\\QQMerged\\ClientApp\\src\\components\\About.js":"8","D:\\project\\QQMerged\\ClientApp\\src\\components\\Layout.js":"9","D:\\project\\QQMerged\\ClientApp\\src\\components\\EditQueue.js":"10","D:\\project\\QQMerged\\ClientApp\\src\\components\\GeneralQueue.jsx":"11","D:\\project\\QQMerged\\ClientApp\\src\\components\\NavMenu.js":"12","D:\\project\\QQMerged\\ClientApp\\src\\components\\CustomScroller.js":"13","D:\\project\\QQMerged\\ClientApp\\src\\components\\Register.jsx":"14","D:\\project\\QQMerged\\ClientApp\\src\\components\\AppContext.jsx":"15","D:\\project\\QQMerged\\ClientApp\\src\\components\\MyQueues.jsx":"16","D:\\project\\QQMerged\\ClientApp\\src\\components\\Home.jsx":"17"},{"size":527,"mtime":1652642944828,"results":"18","hashOfConfig":"19"},{"size":1403,"mtime":1652642941584,"results":"20","hashOfConfig":"19"},{"size":4121,"mtime":1644431281959,"results":"21","hashOfConfig":"19"},{"size":4177,"mtime":1651740048738,"results":"22","hashOfConfig":"19"},{"size":877,"mtime":1644431281957,"results":"23","hashOfConfig":"19"},{"size":4292,"mtime":1651740048739,"results":"24","hashOfConfig":"19"},{"size":3908,"mtime":1645630448466,"results":"25","hashOfConfig":"19"},{"size":3166,"mtime":1644431281955,"results":"26","hashOfConfig":"19"},{"size":868,"mtime":1645034806001,"results":"27","hashOfConfig":"19"},{"size":1212,"mtime":1644431281957,"results":"28","hashOfConfig":"19"},{"size":13004,"mtime":1652796287453,"results":"29","hashOfConfig":"19"},{"size":6624,"mtime":1651740048741,"results":"30","hashOfConfig":"19"},{"size":641,"mtime":1644431281956,"results":"31","hashOfConfig":"19"},{"size":3291,"mtime":1652643488282,"results":"32","hashOfConfig":"19"},{"size":153,"mtime":1645034805998,"results":"33","hashOfConfig":"19"},{"size":5965,"mtime":1651740048740,"results":"34","hashOfConfig":"19"},{"size":3535,"mtime":1652642936751,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tlsxmq",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"96"},"D:\\project\\QQMerged\\ClientApp\\src\\index.js",[],[],"D:\\project\\QQMerged\\ClientApp\\src\\App.js",[],[],"D:\\project\\QQMerged\\ClientApp\\src\\registerServiceWorker.js",[],[],"D:\\project\\QQMerged\\ClientApp\\src\\components\\Account.jsx",["97","98","99","100","101"],[],"ï»¿import React, { Component } from 'react';\r\nimport { Container, Row, Col, Input } from 'reactstrap';\r\nimport Cookies from 'js-cookie'\r\nimport './Account.scss';\r\nimport {Link, Redirect, withRouter} from \"react-router-dom\";\r\n\r\nimport {AppContext} from './AppContext.jsx';\r\n\r\nexport class Account extends Component {\r\n    static displayName = Account.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { username: '', email: '', form_state:true};\r\n        this.handleUsernameChange = this.handleUsernameChange.bind(this);\r\n        /*this.handleEmailChange = this.handleEmailChange.bind(this);*/\r\n        /*this.handlePasswordChange = this.handlePasswordChange.bind(this);*/\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleUsernameChange(event) {\r\n        this.setState({ username: event.target.value, form_state: true });\r\n    }\r\n\r\n    /*handleEmailChange(event) {\r\n        this.setState({ email: event.target.value });\r\n    }*/\r\n\r\n    componentDidMount() {\r\n        this.getUser();\r\n    }\r\n\r\n    async getUser() {\r\n        if (Cookies.get('JWT') != null) {\r\n\r\n            const token = \"Bearer \" + Cookies.get('JWT');\r\n            const requestOptions = {\r\n                method: 'GET',\r\n                headers: { 'Authorization': token }\r\n            };\r\n\r\n            const response = await fetch(`/my_account`, requestOptions);\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                this.setState({ username: data[\"username\"], email: data[\"email\"] });\r\n            }\r\n            else {\r\n                this.props.history.push(`/`);\r\n            }\r\n\r\n        }\r\n        else {\r\n            /*this.setState({ redirect: true });*/\r\n        }\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        const token = \"Bearer \" + Cookies.get('JWT');\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json', \r\n                 'Authorization': token },\r\n            body: JSON.stringify({\r\n                username: this.state.username\r\n            })\r\n        };\r\n\r\n        const response = await fetch('/user/change', requestOptions)\r\n\r\n        if (response.ok) {\r\n            window.open(\"/\", \"_self\");\r\n        }\r\n        else {\r\n            this.setState({ form_state: false });\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        let form_state = this.state.form_state;\r\n        return (\r\n            <Container fluid>\r\n                <div className=\"mainbox\">\r\n\r\n                    <Col >\r\n                        <div className=\"inputitem\">\r\n                            <div className=\"inputbox\" style={{ boxShadow: form_state ? \"0px 4px 2px rgb(0 0 0 / 35%)\" : \"0px 4px 2px rgb(250 50 0)\" }}>\r\n                                <Input type=\"text\" value={this.state.username} onChange={this.handleUsernameChange} placeholder=\"Username\" />\r\n                            </div>\r\n                            <div className=\"inputbox\">\r\n                                <Input type=\"text\" disabled value={this.state.email} onChange={this.handleEmailChange} placeholder=\"E-mail\" />\r\n                            </div>\r\n\r\n                            {/*<div className=\"inputbox\">\r\n\r\n                                <Input type=\"text\" value={this.state.password} onChange={this.handlePasswordChange} placeholder=\"Password\" />\r\n\r\n                            </div>*/}\r\n                            {/*<div className=\"inputbox\">\r\n\r\n                                <Input type=\"text\" value={this.state.phone_number} onChange={this.handlePhoneChange} placeholder=\"Phone number\" />\r\n\r\n                            </div>*/}\r\n                        </div>\r\n\r\n\r\n                    </Col>\r\n                    <Col className=\"btn\">\r\n                        <br></br>\r\n                        <div>\r\n                            <a className=\"change_btn\" onClick={this.handleSubmit}>Change</a>\r\n                        </div>\r\n                    </Col>\r\n\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nAccount.contextType = AppContext;\r\nexport default withRouter(Account);\r\n\r\n","D:\\project\\QQMerged\\ClientApp\\src\\components\\ForgotPass.js",["102","103","104","105","106","107","108","109","110"],[],"ï»¿import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './ForgotPass.css';\r\n\r\nexport class ForgotPass extends Component {\r\n    static displayName = ForgotPass.name;\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"flexbox\">\r\n                <div class=\"flexboxvert\">\r\n                    <form class=\"item\" action=\"\">\r\n                        <input type=\"text\" class=\"iteminput\" placeholder=\"Enter your e-mail or name\" />\r\n                    </form>\r\n                </div>\r\n                <div>\r\n                    <form action=\"\">\r\n                        <input class=\"formbutton\" type=\"submit\" value=\"Remember\" />\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","D:\\project\\QQMerged\\ClientApp\\src\\components\\CreateQueue.js",[],[],"D:\\project\\QQMerged\\ClientApp\\src\\components\\Login.js",["111","112","113","114","115"],[],"ï»¿import React, { Component } from 'react';\r\nimport { Container, Row, Col, Input, Modal, ModalFooter } from 'reactstrap';\r\nimport Cookies from 'js-cookie'\r\nimport './Login.css';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nexport class Login extends Component {\r\n    static displayName = Login.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { email: '', password: '', inputClass: \"inputbox\", form_state:true};\r\n\r\n        this.handleEmailChange = this.handleEmailChange.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n\r\n    }\r\n\r\n    handleEmailChange(event) {\r\n        this.setState({ email: event.target.value });\r\n        this.setState({ form_state: true })\r\n    }\r\n\r\n    handlePasswordChange(event) {\r\n        this.setState({ password: event.target.value });\r\n        this.setState({ form_state: true })\r\n    }\r\n\r\n\r\n    async handleSubmit(event) {\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ email: this.state.email, password: this.state.password })\r\n        };\r\n\r\n        const response = await fetch('/login', requestOptions)\r\n        if (!response.ok) {\r\n\r\n            this.setState({\r\n                form_state: false\r\n            })\r\n        }\r\n        else {\r\n\r\n            const token = await response.text();\r\n\r\n\r\n            Cookies.set('JWT', token, { path: '/' });\r\n            Cookies.set('Click', 0, { path: '/' });\r\n\r\n            window.open(\"/\", \"_self\");\r\n        }\r\n        /*sessionStorage.setItem('id', data[\"idUser\"]);*/\r\n    }\r\n    render() {\r\n        let form_state = this.state.form_state;\r\n        return (\r\n            <Container fluid>\r\n                <div className=\"mainbox\">\r\n\r\n                    <Col >\r\n\r\n                        <div className=\"inputitem\">\r\n\r\n                            <div className=\"inputbox\" style={{ boxShadow: form_state ? \"0px 4px 2px rgb(0 0 0 / 35%)\" : \"0px 3px 3px rgb(250 50 0)\" }} >\r\n\r\n                                <Input type=\"text\" value={this.state.email} onChange={this.handleEmailChange} onSubmit={this.handleSubmit} placeholder=\"E-mail\" />\r\n                            </div>\r\n\r\n                            <div className=\"inputbox\" style={{ boxShadow: form_state ? \"0px 4px 2px rgb(0 0 0 / 35%)\" : \"0px 3px 3px rgb(250 50 0)\" }} >\r\n\r\n                                <Input type=\"password\" value={this.state.password} onChange={this.handlePasswordChange} onSubmit={this.handleSubmit} placeholder=\"Password\" />\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n                    </Col>\r\n                    <Col >\r\n                        <Row className=\"btns\">\r\n                            <Col sm=\"6\" style={{ padding: \"0.375rem 0.75rem\" }}>\r\n                                <label class=\"checkbox_container\">Remember me\r\n                                    <input type=\"checkbox\" />\r\n                                    <span class=\"checkmark\"></span>\r\n                                </label>\r\n                            </Col>\r\n                            <Col sm=\"6\" className=\"btn\">\r\n                                <div >\r\n                                    <a className=\"login_btn\" onClick={this.handleSubmit}>LogIn</a>\r\n                                </div>\r\n                            </Col>\r\n                         \r\n                            <Col className=\"btn\">\r\n                                <div >\r\n                                    <a href=\"/forgotpass\" className=\"forgotpass_btn\" >Forgot password?</a>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n\r\n\r\n                </div>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","D:\\project\\QQMerged\\ClientApp\\src\\components\\About.js",["116","117","118","119","120","121","122","123","124","125"],[],"import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './About.css';\r\n\r\nexport class About extends Component {\r\n  static displayName = About.name;\r\n\r\n  render() {\r\n    return (\r\n        <Container fluid>\r\n            <div>\r\n                <br></br>\r\n                <h2 align=\"center\" className=\"htext\">Existing problem</h2>\r\n                <br></br>\r\n                <p className=\"problem\" align=\"center\">This situation occurs when people form a queue, such as at the checkout in a self-service store.\r\n                    Fluctuations in the length of the queue in front of the cash register can be described by a convolution\r\n                    of two probability distributions,\r\n                    one of which characterizes the arrival of customers, and the other at the end of their service.<br></br><br></br>\r\n                    Then you can inform the administration about the expected maximum length of the queue.\r\n                    Obviously, the availability of such information will allow the organization of normal customer service. \r\n                    At the same time, he can make a decision based on the allowable degree of risk,\r\n                    believing that buyers can wait longer than the previously determined time.\r\n                    Probably the answer will vary depending on the day of the week and even the time of day.\r\n                    Conducting operational research will lead to more scientific and more efficient use of available labor.</p>\r\n                <br></br>\r\n                <h2 align=\"center\" className=\"htext\">We can fix it!</h2>\r\n                <br></br>\r\n                <div className=\"box alt\">\r\n                <div class=\"row gtr-uniform\">\r\n                <section class=\"col-4 col-6-medium col-12-xsmall\">\r\n                <img src=\"https://i.ibb.co/6mycNNY/comfortable-icon-1.png\" className=\"comfort\"/>\r\n                <h3 align=\"center\">Comfortable interface</h3>\r\n                <p align=\"center\">Our startup has a comfortable and wonderful design and is easy to use</p>\r\n                 </section>\r\n                <section class=\"col-4 col-6-medium col-12-xsmall\">\r\n                <img src=\"https://i.ibb.co/XWRSsQv/time.png\" className=\"comfort\" />\r\n                <h3 align=\"center\">Planning </h3>\r\n                <p align=\"center\">Plan your day, stand in queue and don't worry about someone taking your place </p>\r\n                 </section>\r\n                <section class=\"col-4 col-6-medium col-12-xsmall\">\r\n                <img src=\"https://i.ibb.co/Qr53sfg/img-456510.png\" className=\"comfort\" />\r\n                <h3 align=\"center\">Free</h3>\r\n                <p align=\"center\">Another advantage of our service is that it is free to use</p>\r\n                </section>\r\n                </div>\r\n                </div>\r\n                <br></br>\r\n                <br></br>\r\n                <a href=\"/createqueue\" className=\"floating-button\">Start</a>\r\n                <br></br>\r\n\r\n          </div>\r\n        </Container>\r\n    );\r\n  }\r\n}\r\n","D:\\project\\QQMerged\\ClientApp\\src\\components\\Layout.js",[],[],"D:\\project\\QQMerged\\ClientApp\\src\\components\\EditQueue.js",["126","127","128","129","130","131","132","133","134"],[],"ï»¿import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './EditQueue.css';\r\n\r\nexport class EditQueue extends Component {\r\n    static displayName = EditQueue.name;\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"flexbox\">\r\n                <div class=\"flexboxvert\">\r\n                    <form class=\"item\" action=\"\">\r\n                        <input type=\"text\" class=\"iteminput\" placeholder=\"Name your queue\" />\r\n                    </form>\r\n                    <form class=\"item\" action=\"\">\r\n                        <input type=\"text\" class=\"iteminput1\" placeholder=\"Queue description\" />\r\n                    </form>\r\n                    <form class=\"item\" action=\"\">\r\n                        <input type=\"text\" class=\"iteminput\" placeholder=\"Password\" />\r\n                    </form>\r\n                </div>\r\n                <div>\r\n                    <form action=\"\">\r\n                        <input class=\"formbutton\" type=\"submit\" value=\"Edit queue\" />\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","D:\\project\\QQMerged\\ClientApp\\src\\components\\GeneralQueue.jsx",["135","136","137","138","139"],[],"ï»¿import React, { Component } from 'react';\r\nimport { Container, Row, Col, Spinner} from 'reactstrap';\r\nimport Cookies from 'js-cookie'\r\nimport { Virtuoso } from 'react-virtuoso';\r\nimport CustomScrollbar from \"./CustomScroller\";\r\nimport \"overlayscrollbars/css/OverlayScrollbars.css\";\r\nimport './GeneralQueue.scss';\r\nimport {Redirect, withRouter} from \"react-router-dom\";\r\nimport {AppContext} from './AppContext.jsx';\r\nimport { HubConnection } from '@aspnet/signalr-client';\r\n\r\n\r\nexport class GeneralQueue extends Component {\r\n    static displayName = GeneralQueue.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.intervalID = 0;\r\n        this.state = { qname: \"\", queue: [], qonline: true, loading: true, id: this.props.match.params.id, isOdmen: false, redirect: false, clicker: 0,  clickercolor: Math.floor(Math.random() * 270) + 60,\r\n            isInQueue: false, placeInQueue: 0, userId: sessionStorage.getItem('id'), hubConnection: null};\r\n\r\n        this.handleNext = this.handleNext.bind(this);\r\n        this.click = this.click.bind(this);\r\n        this.handleFreeze = this.handleFreeze.bind(this);\r\n        this.handleJoin = this.handleJoin.bind(this);\r\n        this.getQ = this.getQ.bind(this);\r\n        this.click = this.click.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getQ();\r\n        this.qupdate();\r\n        this.intervalID = setInterval(() => { this.qupdate(); }, 3000);\r\n        const hubConnection = new HubConnection('http://localhost:5000/queue');\r\n\r\n        this.setState({ hubConnection}, () => {\r\n            this.state.hubConnection\r\n                .start()\r\n                .then(() => console.log('Connection started!'))\r\n                .catch(err => console.log('Error while establishing connection :('));\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n\r\n    async getQ() {\r\n        if (Cookies.get('JWT') != null) {\r\n            const token = \"Bearer \" + Cookies.get('JWT');\r\n\r\n            const qrequestOptions = {\r\n                method: 'GET',\r\n                headers: { 'Authorization': token }\r\n            };\r\n\r\n            const qownresp = await fetch(`IOwner/${this.state.id}`, qrequestOptions);\r\n            if (qownresp.ok) {\r\n                const qown = await qownresp.json();\r\n                this.setState({ isOdmen: qown });\r\n            }\r\n\r\n            const qresponse = await fetch(`event/${this.state.id}`, qrequestOptions);\r\n            if (qresponse.ok) {\r\n                const qdata = await qresponse.json();\r\n                this.setState({ qname: qdata[\"title\"], qonline: !qdata[\"isSuspended\"], loading: false });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ redirect: true });\r\n        }\r\n    }\r\n\r\n    async handleNext() {\r\n        if (this.state.isOdmen) {\r\n\r\n            const token = \"Bearer \" + Cookies.get('JWT');\r\n            const requestOptions = {\r\n                method: 'PUT',\r\n                headers: { 'Authorization': token }\r\n            };\r\n\r\n            const response = await fetch(`/queue/${this.state.id}/moder/next`, requestOptions);\r\n\r\n            if (response.ok) {\r\n                this.qupdate();\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ redirect: true });\r\n        }\r\n    }\r\n\r\n\r\n    async handleFreeze() {\r\n        if (this.state.isOdmen) {\r\n            const token = \"Bearer \" + Cookies.get('JWT');\r\n            const requestOptions = {\r\n                method: 'PUT',\r\n                headers: { 'Authorization': token }\r\n            };\r\n\r\n\r\n            if (this.state.qonline) {\r\n                const response = await fetch(`/queue/${this.state.id}/moder/close`, requestOptions);\r\n                if (response.ok) {\r\n                    this.qupdate();\r\n                }\r\n            } else {\r\n                const response = await fetch(`/queue/${this.state.id}/moder/open`, requestOptions);\r\n                if (response.ok) {\r\n                    this.qupdate();\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ redirect: true });\r\n        }\r\n    }\r\n\r\n\r\n    async qupdate() {\r\n        if (Cookies.get('JWT') != null) {\r\n            const token = \"Bearer \" + Cookies.get('JWT');\r\n\r\n            const qrequestOptions = {\r\n                method: 'GET',\r\n                headers: { 'Authorization': token }\r\n            };\r\n\r\n            const qownresp = await fetch(`IOwner/${this.state.id}`, qrequestOptions);\r\n            if (qownresp.ok) {\r\n                const qown = await qownresp.json();\r\n                this.setState({ isOdmen: qown });\r\n            }\r\n\r\n            const qresponse = await fetch(`event/${this.state.id}`, qrequestOptions);\r\n            if (qresponse.ok) {\r\n                const qdata = await qresponse.json();\r\n                this.setState({ qname: qdata[\"title\"], qonline: !qdata[\"isSuspended\"] });\r\n            }\r\n\r\n            const qlistresponse = await fetch(`get_queue/${this.state.id}`, qrequestOptions);\r\n            if (qlistresponse.ok) {\r\n                const qlist = await qlistresponse.json();\r\n\r\n                this.setState({ placeInQueue: 0 });\r\n\r\n                for (var i = 0; i < qlist.length; i++) {\r\n                    if (qlist[i].idUser == this.state.userId) {\r\n                        this.setState({ isInQueue: true, placeInQueue: i + 1 });\r\n                    };\r\n                }\r\n                /*qlist.push({eventId: -1, id: -1, idUser: -1, number: -1, status: \"\", time_queue: \"\", username: \"\"});*/\r\n                this.setState({ queue: qlist });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ redirect: true });\r\n        }\r\n    }\r\n\r\n    click() {\r\n        let color = this.state.clickercolor;\r\n        if (color >= 360) {\r\n            color = 0;\r\n        }\r\n        this.setState({ clicker: this.state.clicker + 1, clickercolor: color + 1 });\r\n    }\r\n\r\n\r\n    async handleJoin() {\r\n        if (!this.state.isOdmen) {\r\n            const token = \"Bearer \" + Cookies.get('JWT');\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Authorization': token }\r\n            };\r\n\r\n            if (!this.state.isInQueue) {\r\n                const response = await fetch(`/queue/enter/${this.state.id}`, requestOptions);\r\n                if (response.ok) {\r\n                    this.setState({ isInQueue: true });\r\n                    this.qupdate();\r\n                }\r\n            } else {\r\n                requestOptions[\"method\"] = 'DELETE';\r\n                const response = await fetch(`/queue/delete/${this.state.id}`, requestOptions);\r\n                if (response.ok) {\r\n                    this.setState({ isInQueue: false });\r\n                    this.qupdate();\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ redirect: true });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        let queue = this.state.queue\r\n        let qname = this.state.qname\r\n        let qsize = this.state.queue.length\r\n        let qid = this.state.id\r\n        let clicker = this.state.clicker\r\n        let isOdmen = this.state.isOdmen;\r\n        let qstate = this.state.qonline;\r\n        let place = this.state.placeInQueue;\r\n        let inQ = this.state.isInQueue;\r\n        let color = this.state.clickercolor;\r\n\r\n        const Button1 = () => {\r\n            if (isOdmen) {\r\n                return <div className=\"next_button\" onClick={this.handleNext}>NEXT</div>;\r\n            } else {\r\n                if (inQ) {\r\n                    return <div style={{backgroundColor: \"#E87C64\"}} className=\"join_button\" onClick={this.handleJoin}>LEAVE</div>;\r\n                } else {\r\n                    return <div className=\"join_button\" onClick={this.handleJoin}>JOIN</div>;\r\n                }\r\n            }\r\n        }\r\n\r\n        const Button2 = () => {\r\n            return <div className=\"ppl_inqueue\">{qsize}</div>;\r\n        }\r\n\r\n        const Button3 = () => {\r\n            if (isOdmen) {\r\n                if (qstate) {\r\n                    return <div className=\"freeze_button\" onClick={this.handleFreeze}><img src=\"/freeze.svg\" alt=\"\"/></div>;\r\n                } else {\r\n                    return <div style={{backgroundColor: \"#CCCCCC\"}} className=\"freeze_button\" onClick={this.handleFreeze}><img src=\"/freeze.svg\" alt=\"\" /></div>;\r\n                }\r\n            } else {\r\n                if (inQ) {\r\n                    return <div className=\"your_place\">You<br/>{place}</div>;\r\n                } else {\r\n                    return <div className=\"your_place\">You</div>;\r\n                }\r\n            }\r\n        }\r\n\r\n        const clickerColor = () => {\r\n            const colorStr = \"hsl(\" + color + \", 90%, 65%)\";\r\n            if (clicker <= 0) {\r\n                return { backgroundColor: colorStr, fontSize: '3vw'};\r\n            } else {\r\n                return { backgroundColor: colorStr };\r\n            }\r\n        }\r\n\r\n        const Button4 = () => {\r\n            if (clicker > 0) {\r\n                return <div className=\"clicker\" style={clickerColor()} onClick={this.click}>{clicker}</div>;\r\n            } else {\r\n                return <div className=\"clicker\" style={clickerColor()} onClick={this.click}>Click!</div>;\r\n            }\r\n        }\r\n\r\n        if (this.state.redirect) {\r\n            return (<Redirect push to={`/`} />);\r\n        }\r\n\r\n        if (this.state.loading) {\r\n            return (<div className=\"spinnerDiv\"><Spinner animation=\"border\" className=\"spinner\" /></div>);\r\n        }\r\n\r\n        const listElement = (index) => {\r\n            if (index == 0) {\r\n                return { backgroundColor: \"#82FF9D\" };\r\n            }\r\n            else if (index == place - 1) {\r\n                return { backgroundColor: \"#EDB734\" };\r\n            }\r\n            /*else if (index == qsize - 1) {\r\n                return { visibility: \"hidden\" };\r\n            }*/\r\n            else {\r\n                return { backgroundColor: \"white\" };\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <Container fluid>\r\n                <div className=\"main_block\">\r\n                    <Row>\r\n                        <div className=\"queue_name\">\r\n                            <Row style={{width:\"100%\"}}>\r\n                                <Col xs=\"9\" className=\"queue_name_col\">\r\n                                    {qname}\r\n                                </Col>\r\n                                <Col xs=\"3\" className=\"col3_custom\">\r\n                                    <div className=\"copy_link_button\" onClick={() => {navigator.clipboard.writeText(`${this.state.id}`)}} data-toggle=\"tooltip\" data-placement=\"top\" title=\"Copy queue link\">\r\n                                        <img src=\"/link.svg\" alt=\"\" height=\"100%\" />\r\n                                    </div>\r\n                                    <div style={{ backgroundColor: qstate ? \"#82FF9D\" : \"#CCCCCC\" }} className=\"queue_state\">\r\n                                    </div>\r\n                                    {/*<div className=\"queue_edit_button\" onClick={this.alert} data-toggle=\"tooltip\" data-placement=\"top\" title=\"Edit queue\">\r\n                                        <img src=\"/edit.svg\" alt=\"\" height=\"100%\" />\r\n                                    </div>*/}\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </Row>\r\n\r\n                    <Row className=\"queue_block\">\r\n                        <Col sm=\"8\">\r\n                            <div className=\"queue\">\r\n                                <Virtuoso\r\n                                    components={{Scroller: CustomScrollbar}}\r\n                                    className=\"QList\"\r\n                                    data={queue}\r\n                                    itemContent={(index, Queue) => <div className=\"QItem\" style={listElement(index)}>{Queue.username}</div>}\r\n                                />\r\n                            </div>\r\n                        </Col>\r\n\r\n                        <Col sm=\"4\">\r\n                            <Row className=\"buttons\">\r\n                                <Col sm=\"6\" className=\"button\">\r\n                                    {Button1()}\r\n                                </Col>\r\n                                <Col sm=\"6\" className=\"button\">\r\n                                    {Button2()}\r\n                                </Col>\r\n                                <Col sm=\"6\" className=\"button\">\r\n                                    {Button3()}\r\n                                </Col>\r\n                                <Col sm=\"6\" className=\"button\">\r\n                                    {Button4()}\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nGeneralQueue.contextType = AppContext;\r\nexport default withRouter(GeneralQueue);","D:\\project\\QQMerged\\ClientApp\\src\\components\\NavMenu.js",[],[],"D:\\project\\QQMerged\\ClientApp\\src\\components\\CustomScroller.js",["140"],[],"ï»¿import React, { useCallback } from \"react\";\r\nimport { OverlayScrollbarsComponent } from \"overlayscrollbars-react\";\r\n\r\nconst CustomScrollbar = React.forwardRef(({ children, ...props }, ref) => {\r\n  const refSetter = useCallback(\r\n    (scrollbarsRef) => {\r\n      if (scrollbarsRef) {\r\n        console.log(scrollbarsRef.osInstance().getElements().viewport);\r\n        ref.current = scrollbarsRef.osInstance().getElements().viewport;\r\n      }\r\n    },\r\n    [ref]\r\n  );\r\n\r\n  return (\r\n    <OverlayScrollbarsComponent ref={refSetter} {...props}>\r\n      {children}\r\n    </OverlayScrollbarsComponent>\r\n  );\r\n});\r\n\r\nexport default CustomScrollbar;\r\n","D:\\project\\QQMerged\\ClientApp\\src\\components\\Register.jsx",["141"],[],"ï»¿import React, { Component } from 'react';\r\nimport { Container, Col, Input } from 'reactstrap';\r\nimport './Register.scss';\r\n\r\nexport class Register extends Component {\r\n    static displayName = Register.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { name: '', email: '', password: '',form_state: true };\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleEmailChange = this.handleEmailChange.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.setState({ name: event.target.value });\r\n        this.setState({ form_state: true })\r\n    }\r\n    handleEmailChange(event) {\r\n        this.setState({ email: event.target.value });\r\n        this.setState({ form_state: true })\r\n    }\r\n\r\n    handlePasswordChange(event) {\r\n        this.setState({ password: event.target.value });\r\n        this.setState({ form_state: true })\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ username: this.state.name, email: this.state.email, password: this.state.password })\r\n        };\r\n\r\n        const response = await fetch('/register', requestOptions)\r\n        if (!response.ok) {\r\n\r\n            this.setState({\r\n                form_state: false\r\n            })\r\n        }\r\n        else {\r\n\r\n            window.open(\"/\", \"_self\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let form_state = this.state.form_state;\r\n        return (\r\n            <Container fluid>\r\n                <div className=\"register_block\">\r\n\r\n                    <Col >\r\n                        <div className=\"register_iteminput\">\r\n\r\n                            <div className=\"register_inputbox\" style={{ boxShadow: form_state ? \"0px 4px 2px rgb(0 0 0 / 35%)\" : \"0px 3px 3px rgb(200 0 0)\" }}>\r\n\r\n                                <Input type=\"text\" value={this.state.name} onChange={this.handleNameChange} placeholder=\"Name\" />\r\n                            </div>\r\n\r\n                            <div className=\"register_inputbox\" style={{ boxShadow: form_state ? \"0px 4px 2px rgb(0 0 0 / 35%)\" : \"0px 3px 3px rgb(200 0 0)\" }}>\r\n\r\n                                <Input type=\"text\" value={this.state.email} onChange={this.handleEmailChange} placeholder=\"E-mail\" />\r\n                            </div>\r\n\r\n                            <div className=\"register_inputbox\" style={{ boxShadow: form_state ? \"0px 4px 2px rgb(0 0 0 / 35%)\" : \"0px 3px 3px rgb(200 0 0)\" }}>\r\n\r\n                                <Input type=\"password\" value={this.state.password} onChange={this.handlePasswordChange} placeholder=\"Password\" />\r\n\r\n                            </div>\r\n                            <div >\r\n                                    <div className=\"register_btn\" onClick={this.handleSubmit}>Register\r\n                                    </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        \r\n\r\n\r\n                    </Col>\r\n                    \r\n\r\n\r\n\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","D:\\project\\QQMerged\\ClientApp\\src\\components\\AppContext.jsx",["142"],[],"ï»¿import React from 'react';\r\n\r\nexport const AppContext = React.createContext(\r\n    {\r\n        auth: false,\r\n        toggleAuth: () => { },\r\n    }\r\n);\r\n","D:\\project\\QQMerged\\ClientApp\\src\\components\\MyQueues.jsx",[],[],"D:\\project\\QQMerged\\ClientApp\\src\\components\\Home.jsx",["143","144","145"],[],"ï»¿import React, { Component } from 'react';\r\nimport { Container, Row, Col, Input, Modal, ModalFooter} from 'reactstrap';\r\nimport './Home.scss';\r\nimport Cookies from 'js-cookie'\r\nimport {Link, Redirect, withRouter} from \"react-router-dom\";\r\n\r\nimport {AppContext} from './AppContext.jsx';\r\n\r\nexport class Home extends Component {\r\n    static displayName = Home.name;\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = { idQ: \"\", showNfmsg: false, errmsg:\"Queue not found\", redirect: false};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.toggleNfmsg = this.toggleNfmsg.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ idQ: event.target.value });\r\n    }\r\n\r\n    async handleSubmit() {\r\n        if (Cookies.get('JWT') != null){\r\n            if (this.state.idQ == \"\") {\r\n            \r\n            }\r\n            else {\r\n                const token = \"Bearer \" + Cookies.get('JWT');\r\n                const requestOptions = {\r\n                    method: 'GET',\r\n                    headers: { 'Authorization': token }\r\n                };\r\n\r\n                const response = await fetch(`event/${this.state.idQ}`, requestOptions);\r\n\r\n                if (!response.ok) {\r\n                    this.toggleNfmsg();\r\n                }\r\n                else {\r\n                    this.props.history.push(`queue/${this.state.idQ}`);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ redirect: true });\r\n        }\r\n    }\r\n\r\n\r\n    toggleNfmsg() {\r\n        this.setState({ showNfmsg: !this.state.showNfmsg });\r\n    }\r\n\r\n\r\n    render() {\r\n        let id = this.state.idQ\r\n        let msg = this.state.errmsg\r\n\r\n        if (this.state.redirect) {\r\n            return (<Redirect push to={`login`} />);\r\n        }\r\n\r\n        return (\r\n            <Container fluid>\r\n                <div className=\"home_background\"></div>\r\n                <Row style={{flexWrap: \"wrap-reverse\"}}>\r\n                    <Col sm=\"6\">\r\n                        <div className=\"input_id_block\">\r\n                            <div className=\"input_background_background\">\r\n                                <div className=\"input_background\">\r\n                                    <Input type=\"text\" value={this.state.idQ} onChange={this.handleChange} placeholder=\"ID...\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <Link to=\"\" onClick={this.handleSubmit}>\r\n                                <div className=\"submit_button\">\r\n                                    Join\r\n                                </div>\r\n                            </Link>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col sm=\"6\">\r\n                        <div className=\"about_block\">\r\n                            <h1>Stop wasting time in queues</h1>\r\n                            <h2>use smart queue service today</h2>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n                <Modal isOpen={this.state.showNfmsg} toggle={this.toggleNfmsg}>\r\n                    <ModalFooter>\r\n                        {msg}\r\n                        <div className=\"ok_button1\" onClick={this.toggleNfmsg}>OK</div>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nHome.contextType = AppContext;\r\nexport default withRouter(Home);",{"ruleId":"146","severity":1,"message":"147","line":1,"column":1,"nodeType":"148","messageId":"149","fix":"150"},{"ruleId":"151","severity":1,"message":"152","line":2,"column":21,"nodeType":"153","messageId":"154","endLine":2,"endColumn":24},{"ruleId":"151","severity":1,"message":"155","line":5,"column":9,"nodeType":"153","messageId":"154","endLine":5,"endColumn":13},{"ruleId":"151","severity":1,"message":"156","line":5,"column":15,"nodeType":"153","messageId":"154","endLine":5,"endColumn":23},{"ruleId":"157","severity":1,"message":"158","line":114,"column":29,"nodeType":"159","endLine":114,"endColumn":83},{"ruleId":"146","severity":1,"message":"147","line":1,"column":1,"nodeType":"148","messageId":"149","fix":"160"},{"ruleId":"151","severity":1,"message":"161","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":18},{"ruleId":"151","severity":1,"message":"162","line":2,"column":20,"nodeType":"153","messageId":"154","endLine":2,"endColumn":29},{"ruleId":"151","severity":1,"message":"163","line":2,"column":31,"nodeType":"153","messageId":"154","endLine":2,"endColumn":37},{"ruleId":"151","severity":1,"message":"164","line":2,"column":39,"nodeType":"153","messageId":"154","endLine":2,"endColumn":50},{"ruleId":"151","severity":1,"message":"165","line":2,"column":52,"nodeType":"153","messageId":"154","endLine":2,"endColumn":65},{"ruleId":"151","severity":1,"message":"166","line":2,"column":67,"nodeType":"153","messageId":"154","endLine":2,"endColumn":74},{"ruleId":"151","severity":1,"message":"167","line":2,"column":76,"nodeType":"153","messageId":"154","endLine":2,"endColumn":83},{"ruleId":"151","severity":1,"message":"155","line":3,"column":10,"nodeType":"153","messageId":"154","endLine":3,"endColumn":14},{"ruleId":"146","severity":1,"message":"147","line":1,"column":1,"nodeType":"148","messageId":"149","fix":"168"},{"ruleId":"151","severity":1,"message":"169","line":2,"column":38,"nodeType":"153","messageId":"154","endLine":2,"endColumn":43},{"ruleId":"151","severity":1,"message":"170","line":2,"column":45,"nodeType":"153","messageId":"154","endLine":2,"endColumn":56},{"ruleId":"151","severity":1,"message":"155","line":5,"column":10,"nodeType":"153","messageId":"154","endLine":5,"endColumn":14},{"ruleId":"157","severity":1,"message":"158","line":96,"column":37,"nodeType":"159","endLine":96,"endColumn":90},{"ruleId":"151","severity":1,"message":"161","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":18},{"ruleId":"151","severity":1,"message":"163","line":2,"column":31,"nodeType":"153","messageId":"154","endLine":2,"endColumn":37},{"ruleId":"151","severity":1,"message":"164","line":2,"column":39,"nodeType":"153","messageId":"154","endLine":2,"endColumn":50},{"ruleId":"151","severity":1,"message":"165","line":2,"column":52,"nodeType":"153","messageId":"154","endLine":2,"endColumn":65},{"ruleId":"151","severity":1,"message":"166","line":2,"column":67,"nodeType":"153","messageId":"154","endLine":2,"endColumn":74},{"ruleId":"151","severity":1,"message":"167","line":2,"column":76,"nodeType":"153","messageId":"154","endLine":2,"endColumn":83},{"ruleId":"151","severity":1,"message":"155","line":3,"column":10,"nodeType":"153","messageId":"154","endLine":3,"endColumn":14},{"ruleId":"171","severity":1,"message":"172","line":32,"column":17,"nodeType":"159","endLine":32,"endColumn":97},{"ruleId":"171","severity":1,"message":"172","line":37,"column":17,"nodeType":"159","endLine":37,"endColumn":84},{"ruleId":"171","severity":1,"message":"172","line":42,"column":17,"nodeType":"159","endLine":42,"endColumn":90},{"ruleId":"146","severity":1,"message":"147","line":1,"column":1,"nodeType":"148","messageId":"149","fix":"173"},{"ruleId":"151","severity":1,"message":"161","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":18},{"ruleId":"151","severity":1,"message":"162","line":2,"column":20,"nodeType":"153","messageId":"154","endLine":2,"endColumn":29},{"ruleId":"151","severity":1,"message":"163","line":2,"column":31,"nodeType":"153","messageId":"154","endLine":2,"endColumn":37},{"ruleId":"151","severity":1,"message":"164","line":2,"column":39,"nodeType":"153","messageId":"154","endLine":2,"endColumn":50},{"ruleId":"151","severity":1,"message":"165","line":2,"column":52,"nodeType":"153","messageId":"154","endLine":2,"endColumn":65},{"ruleId":"151","severity":1,"message":"166","line":2,"column":67,"nodeType":"153","messageId":"154","endLine":2,"endColumn":74},{"ruleId":"151","severity":1,"message":"167","line":2,"column":76,"nodeType":"153","messageId":"154","endLine":2,"endColumn":83},{"ruleId":"151","severity":1,"message":"155","line":3,"column":10,"nodeType":"153","messageId":"154","endLine":3,"endColumn":14},{"ruleId":"146","severity":1,"message":"147","line":1,"column":1,"nodeType":"148","messageId":"149","fix":"174"},{"ruleId":"175","severity":1,"message":"176","line":150,"column":41,"nodeType":"177","messageId":"149","endLine":150,"endColumn":43},{"ruleId":"151","severity":1,"message":"178","line":205,"column":13,"nodeType":"153","messageId":"154","endLine":205,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":271,"column":23,"nodeType":"177","messageId":"149","endLine":271,"endColumn":25},{"ruleId":"175","severity":1,"message":"176","line":274,"column":28,"nodeType":"177","messageId":"149","endLine":274,"endColumn":30},{"ruleId":"146","severity":1,"message":"147","line":1,"column":1,"nodeType":"148","messageId":"149","fix":"179"},{"ruleId":"146","severity":1,"message":"147","line":1,"column":1,"nodeType":"148","messageId":"149","fix":"180"},{"ruleId":"146","severity":1,"message":"147","line":1,"column":1,"nodeType":"148","messageId":"149","fix":"181"},{"ruleId":"146","severity":1,"message":"147","line":1,"column":1,"nodeType":"148","messageId":"149","fix":"182"},{"ruleId":"175","severity":1,"message":"176","line":27,"column":32,"nodeType":"177","messageId":"149","endLine":27,"endColumn":34},{"ruleId":"151","severity":1,"message":"183","line":59,"column":13,"nodeType":"153","messageId":"154","endLine":59,"endColumn":15},"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"184","text":"185"},"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Redirect' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",{"range":"186","text":"185"},"'Collapse' is defined but never used.","'Container' is defined but never used.","'Navbar' is defined but never used.","'NavbarBrand' is defined but never used.","'NavbarToggler' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.",{"range":"187","text":"185"},"'Modal' is defined but never used.","'ModalFooter' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"range":"188","text":"185"},{"range":"189","text":"185"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'qid' is assigned a value but never used.",{"range":"190","text":"185"},{"range":"191","text":"185"},{"range":"192","text":"185"},{"range":"193","text":"185"},"'id' is assigned a value but never used.",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]